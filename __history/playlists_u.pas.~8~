unit playlists_u;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, StdCtrls, ComCtrls, COMPONENTS, COMMONS, DB, pngimage,
  jpeg;

type
  SaveMode = (smEdit, smNew);

type
  TfrmPlaylists = class(TForm)
    edtSearch: TEdit;
    btnSearch: TButton;
    pnlNav: TPanel;
    pnlPlaylist: TPanel;
    btnSave: TButton;
    pnlDescription: TPanel;
    lbxPlaylists: TListBox;
    lblPlaylists: TLabel;
    pnlInfo: TPanel;
    lbxSongs: TListBox;
    Label2: TLabel;
    Label3: TLabel;
    lbxSongsinPlaylist: TListBox;
    btnRemove: TButton;
    btnAdd: TButton;
    edtName: TLabeledEdit;
    btnFolder: TButton;
    Label4: TLabel;
    btnImage: TButton;
    Label5: TLabel;
    img: TImage;
    btnEdit: TButton;
    btnNew: TButton;
    btnMusicPlayer: TButton;
    btnMainMenu: TButton;
    btnSongs: TButton;
    btnDelete: TButton;
    procedure FormCreate(Sender: TObject);
    procedure lbxPlaylistsClick(Sender: TObject);
    procedure btnSearchClick(Sender: TObject);
    procedure btnEditClick(Sender: TObject);
    procedure lbxSongsinPlaylistClick(Sender: TObject);
    procedure lbxSongsClick(Sender: TObject);
    procedure btnAddClick(Sender: TObject);
    procedure btnRemoveClick(Sender: TObject);
    procedure btnNewClick(Sender: TObject);
    procedure btnSaveClick(Sender: TObject);
    procedure btnDeleteClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
  private
    procedure UpdatePlaylistsLIST;
    procedure UpdateSongsLIST;
    procedure UpdateALLSongs;
    procedure UpdateThisSongsLIST;
    procedure UpdateALLPlaylists;
    procedure SelectPlaylist(play: string); overload;
    procedure SelectPlaylist(index: integer); overload;
    procedure Enabled(ena: boolean);
    procedure AnoSave(fields: TFields);
    procedure SavePlaylistsSongs;
    procedure Clear;
    function CorrectInputs(checkExists:boolean):boolean;
  var
    epDescription: ExtendablePanel;
    allPlaylists: MArray<string>;
    thisPlaylistsSongs: MDict<integer, string>;
    allSongs: MArray<string>;
    alwaysEnabled: MArray<TComponent>;
    imageLinker: LinkedButton;
    folderLinker: LinkedButton;
    currentMode: SaveMode;
    currentIndex: integer;
    createdDate: TDateTime;
  public
    { Public declarations }
  end;

var
  frmPlaylists: TfrmPlaylists;

implementation

uses database_u, errors_u;
{$R *.dfm}

procedure TfrmPlaylists.AnoSave(fields: TFields);
begin
  fields.FieldByName('name').Value := edtName.Text;
  fields.FieldByName('description').Value := epDescription.field.Text;
  fields.FieldByName('image').Value := imageLinker.OFile;
  fields.FieldByName('directory').Value := folderLinker.OFile;
  fields.FieldByName('id').Value := lbxPlaylists.Count;
  if createdDate = 0 then
    createdDate := Date;
  fields.FieldByName('created').AsDateTime := createdDate;

end;

procedure TfrmPlaylists.btnAddClick(Sender: TObject);
begin
  if lbxSongs.ItemIndex <> -1 then
  begin
    if thisPlaylistsSongs.values.find(lbxSongs.Items[lbxSongs.ItemIndex])
      = -1 then
    begin
      thisPlaylistsSongs.append(lbxSongs.ItemIndex,
        lbxSongs.Items[lbxSongs.ItemIndex]);
      UpdateThisSongsLIST;
    end;
  end;
end;

procedure TfrmPlaylists.btnDeleteClick(Sender: TObject);
var
  pair : MPair<integer,string>;
  apair : MPair<Variant,Variant>;
  fpair : MPair<string,string>;
begin
  if currentIndex <> -1 then
  begin
    MDataBase.RemoveFields(dmDataBase.tblPlaylists, 'name',
      lbxPlaylists.Items[currentIndex]);
  apair := MPair<Variant,Variant>.Create(0,0);
  fpair := MPair<string,string>.Create('playlist','song');
  for pair in thisPlaylistsSongs.pairs.container do
  begin
    apair.key := pair.key;
    apair.value := allSongs.findIf(pair.value, Strings.Equivalent);
    MDataBase.RemoveFields(dmDataBase.tblPofS, fpair,
      apair);
  end;
  Clear;
  UpdateALLPlaylists;
  UpdatePlaylistsLIST;
  btnDelete.Enabled:=false;
  end;
end;

procedure TfrmPlaylists.btnEditClick(Sender: TObject);
begin
  if lbxPlaylists.ItemIndex <> -1 then
  begin
    Enabled(true);
    btnEdit.Enabled := false;
    currentMode := smEdit;
  end;
end;

procedure TfrmPlaylists.btnNewClick(Sender: TObject);
begin
  Enabled(true);
  Clear;
  btnNew.Enabled := false;
  btnEdit.Enabled := false;
  btnDelete.Enabled := false;
  currentMode := smNew;
end;

procedure TfrmPlaylists.btnRemoveClick(Sender: TObject);
var
  i: integer;
  apair : MPair<Variant, Variant>;
begin
  if lbxSongsinPlaylist.ItemIndex <> -1 then
  begin
    apair := MPair<Variant, Variant>.Create(0,0);
    apair.key := thisPlaylistsSongs.keys[lbxSongsinPlaylist.ItemIndex];
    apair.value := allSongs.findIf(thisPlaylistsSongs.values[lbxSongsinPlaylist.ItemIndex], Strings.Equivalent);
    MDataBase.RemoveFields(dmDataBase.tblPofS, MPair<string,string>.Create('playlist','song'),apair);
    thisPlaylistsSongs.delete(lbxSongsinPlaylist.ItemIndex);
    UpdateThisSongsLIST;
  end;
end;

procedure TfrmPlaylists.btnSaveClick(Sender: TObject);
var
pair : MPair<integer, string>;
apair : MPair<Variant, Variant>;
fpair : MPair<string,string>;
begin
  if not CorrectInputs(currentMode = smNew) then
    Exit;
  case currentMode of
    smEdit:
      begin
        MDataBase.EditFields(dmDataBase.tblPlaylists, 'id', currentIndex,
          AnoSave);
      end;
    smNew:
      begin
        MDataBase.WriteFields(dmDataBase.tblPlaylists, AnoSave);
        UpdateALLPlaylists;
        UpdatePlaylistsLIST;
        lbxPlaylists.ItemIndex := lbxPlaylists.Count - 1;
      end;
  end;
  fpair := MPair<string,string>.Create('playlist','song');
  apair := MPair<Variant, Variant>.Create(0,0);
  for pair in thisPlaylistsSongs.pairs.container do
  begin
    apair.key := pair.key;
    apair.value := allSongs.findIf(pair.value, Strings.Equivalent);
    if not MDataBase.ContainsFields(dmDataBase.tblPofS, fpair, apair) then
    begin
        MDataBase.WriteFields(dmDataBase.tblPofS, procedure(fields:TFields)
        begin
           fields.FieldByName('playlist').Value := apair.key;
           fields.FieldByName('song').Value := apair.value;
           fields.FieldByName('id').AsInteger := dmDataBase.tblPofS.RecordCount;
        end);
    end;
  end;
end;

procedure TfrmPlaylists.btnSearchClick(Sender: TObject);
begin
  SelectPlaylist(edtSearch.Text)
end;

procedure TfrmPlaylists.Clear;
begin
  edtName.Text := '';
  img.Picture := nil;
  thisPlaylistsSongs := MDict<integer, string>.create();
  folderLinker.OFile := '';
  imageLinker.OFile := '';
  epDescription.field.Text := '';
  createdDate := 0;
end;

function TfrmPlaylists.CorrectInputs(checkExists:boolean): boolean;
begin
  if edtName.Text = '' then
    Error.QuickShow('Required Field Not Filled In!','Name is a required field!')
  else if (checkExists) and (MDataBase.ContainsFields(dmDataBase.tblPlaylists,'name',edtName.Text)) then
    Error.QuickShow('Playlist already exists','a Playlist with name '+edtSearch.Text+' already exists')
  else if thisPlaylistsSongs.len = 0 then
    Error.QuickShow('Playlist is Empty','Add some songs to the Playlist to save it')
  else begin
    result:=true;
    Exit;
  end;
  result:=false;
end;

procedure TfrmPlaylists.Enabled(ena: boolean);
var
  i: integer;
begin
  for i := 0 to ComponentCount - 1 do
    if alwaysEnabled.find(COMPONENTS[i]) = -1 then
      TGraphicControl(COMPONENTS[i]).Enabled := ena;
  epDescription.Enabled(ena);
end;

procedure TfrmPlaylists.FormCreate(Sender: TObject);
begin
  imageLinker := LinkedButton.Extend(btnImage, lbImage, GetCurrentDir,
    procedure begin img.Picture.LoadFromFile(imageLinker.OFile); end);
  folderLinker := LinkedButton.Extend(btnFolder, lbFolder, GetCurrentDir, nil);

  alwaysEnabled := MArray<TComponent>.create([edtSearch, btnSearch,
    btnMusicPlayer, btnMainMenu, btnSongs, lbxPlaylists, btnEdit, pnlNav,
    pnlPlaylist, btnAdd, btnRemove, btnNew, btnDelete, lblPlaylists]);

  epDescription := ExtendablePanel.Extend(pnlDescription, 'Description');
end;

procedure TfrmPlaylists.FormShow(Sender: TObject);
begin
  UpdateALLPlaylists;
  UpdatePlaylistsLIST;
  UpdateALLSongs;
  UpdateSongsLIST;

  Enabled(false);
end;

procedure TfrmPlaylists.SelectPlaylist(play: string);
begin
  SelectPlaylist(allPlaylists.findIf(play, Strings.Equivalent));
end;

procedure TfrmPlaylists.lbxPlaylistsClick(Sender: TObject);
begin
  SelectPlaylist(lbxPlaylists.ItemIndex);
  currentIndex := lbxPlaylists.ItemIndex;
  if currentIndex <> -1 then
  begin
    btnEdit.Enabled := true;
    btnDelete.Enabled := true;
  end
  else
  begin
    btnEdit.Enabled := false;
    btnDelete.Enabled := false;
  end;
end;

procedure TfrmPlaylists.lbxSongsClick(Sender: TObject);
begin
  btnRemove.Enabled := false;
  btnAdd.Enabled := true;
  lbxSongsinPlaylist.ItemIndex := -1;
end;

procedure TfrmPlaylists.lbxSongsinPlaylistClick(Sender: TObject);
begin
  if lbxSongsinPlaylist.Count > 0 then
  begin
    btnRemove.Enabled := true;
    btnAdd.Enabled := false;
    lbxSongs.ItemIndex := -1;
  end
  else
    btnRemove.Enabled := false;
end;

procedure TfrmPlaylists.SavePlaylistsSongs;
var
  maxindex: integer;
  pair: MPair<integer, string>;
begin
  maxindex := dmDataBase.tblPofS.RecordCount - 1;
  for pair in thisPlaylistsSongs.pairs.container do
  begin
    if pair.key > maxindex then
    begin
      MDataBase.WriteFields(dmDataBase.tblPofS,
        procedure(fields: TFields)begin fields.FieldByName('playlist')
          .Value := currentIndex;
        fields.FieldByName('song').Value := allSongs.find(pair.Value); end);
    end;
  end;
end;

procedure TfrmPlaylists.SelectPlaylist(index: integer);
var
  fieldname: string;
begin
  btnEdit.Enabled := true;
  Enabled(false);
  Clear;
  if index <> -1 then
  begin
    lbxPlaylists.ItemIndex := index;
    fieldname := lbxPlaylists.Items[index];
    MDataBase.UseFields(dmDataBase.tblPlaylists, 'name', fieldname,
      procedure(fields: TFields)begin edtName.Text := fieldname;
      epDescription.field.Text := fields.FieldByName('description').AsString;
      if fields.FieldByName('image')
        .AsString <> '' then begin img.Picture.LoadFromFile
        (fields.FieldByName('image').AsString);
      imageLinker.OFile := fields.FieldByName('image').AsString; end;
      if fields.FieldByName('directory')
        .AsString <> '' then begin img.Picture.LoadFromFile
        (fields.FieldByName('directory').AsString);
      imageLinker.OFile := fields.FieldByName('directory').AsString; end;
      createdDate := fields.FieldByName('created').AsDateTime; end);
    thisPlaylistsSongs := MDict<integer, string>.create;
    MDataBase.UseFields(dmDataBase.tblPofS, 'playlist', index, false,
      procedure(fields: TFields)begin MDataBase.UseFields(dmDataBase.tblSongs,
        'id', fields.FieldByName('song').Value,
        procedure(fieldsSongs: TFields)begin thisPlaylistsSongs.append
          (fields.FieldByName('song').Value,
          fieldsSongs.FieldByName('name').AsString); end); end);
    UpdateThisSongsLIST;
  end;
end;

procedure TfrmPlaylists.UpdateALLPlaylists;
begin
  allPlaylists := Converter<Variant,
    string>.convert(MDataBase.LoadFieldIntoArray(dmDataBase.tblPlaylists,
      'name'), function(Value: Variant): string begin result := string(Value);
    end);
end;

procedure TfrmPlaylists.UpdateALLSongs;
begin
  allSongs := Converter<Variant,
    string>.convert(MDataBase.LoadFieldIntoArray(dmDataBase.tblSongs, 'name'),
    function(Value: Variant): string begin result := string(Value); end);
end;

procedure TfrmPlaylists.UpdatePlaylistsLIST;
var
  temp: string;
begin
  lbxPlaylists.Items.Clear;
  for temp in allPlaylists.container do
    lbxPlaylists.Items.Add(temp);
end;

procedure TfrmPlaylists.UpdateSongsLIST;
var
  temp: string;
begin
  lbxSongs.Items.Clear;
  for temp in allSongs.container do
    lbxSongs.Items.Add(temp);
end;

procedure TfrmPlaylists.UpdateThisSongsLIST;
var
  temp: string;
begin
  lbxSongsinPlaylist.Items.Clear;
  for temp in thisPlaylistsSongs.values.container do
    lbxSongsinPlaylist.Items.Add(temp);
end;

end.
